name: Nightly Infra Test

on:
  schedule:
    - cron: '0 0 * * *' # Runs every midnight UTC
  workflow_dispatch:
jobs:
  infra-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Launch EC2 Instance
        id: launch_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-05b10e08d247fb927 \ # Amazon Linux 2023
            --instance-type t2.micro \
            --key-name ${{ secrets.SSH_KEY_NAME }} \ # Ensure this key exists in AWS
            --security-group-ids sg-0ad06222005aa8556 \ # Replace with your security group ID
            --subnet-id subnet-0be339d69f911c198 \ # Replace with your private subnet
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Test-EC2}]' \
            --query 'Instances[0].InstanceId' --output text)
          
          echo "EC2_INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for EC2 to be Ready
        run: |
          sleep 60 # Give time for EC2 to initialize

        # assign labrole todo

      - name: Fetch Public IP
        id: fetch_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "EC2 Public IP: $PUBLIC_IP"

      - name: Allow SSH Access for GitHub Actions
        run: |
          RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
          aws ec2 authorize-security-group-ingress \
            # --group-id sg-0ad06222005aa8556 \ # Replace with your security group ID
            --group-id $(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' --output text) \
            --protocol tcp \
            --port 22 \
            --cidr $RUNNER_IP/32

      - name: SSH into EC2 & Run Tests
        id: smoke-test
        continue-on-error: true
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$PUBLIC_IP << 'EOF'
            sudo yum update -y
            
            # Install Git
            sudo yum install -y git

            # Install Docker
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo usermod -aG docker $USER
            newgrp docker
            
            # Clone the repository
            cd ~
            git clone https://github.com/nannanav/crud-react-node-mySQL-go.git
            cd crud-react-node-mySQL-go
            
            # Run smoke tests
            bash smoke_test.sh
            echo $? > smoke_test_result.txt
          EOF
          
          SMOKE_TEST_STATUS=$(ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$PUBLIC_IP "cat smoke_test_result.txt")
          echo "SMOKE_TEST_STATUS=$SMOKE_TEST_STATUS" >> $GITHUB_ENV

      - name: Terminate EC2 Instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids $EC2_INSTANCE_ID

      - name: Trigger Deployment Workflow
        if: env.SMOKE_TEST_STATUS == '0'  # Only trigger if smoke tests passed
        run: |
          curl -X POST -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            --data '{"ref": "main"}' \
            https://api.github.com/repos/nannanav/crud-infra/actions/workflows/build-and-deploy.yml/dispatches