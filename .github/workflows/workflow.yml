name: Nightly Infra Test

on:
  schedule:
    - cron: '0 0 * * *' # Runs every midnight UTC
  workflow_dispatch:
jobs:
  infra-test:
    runs-on: ubuntu-latest
    outputs:
      smoke_test_status: ${{ steps.smoke-test.outputs.SMOKE_TEST_STATUS }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Launch EC2 Instance
        id: launch_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-05b10e08d247fb927 \
            --instance-type t2.micro \
            --key-name ${{ secrets.SSH_KEY_NAME }} \
            --security-group-ids sg-0ad06222005aa8556 \
            --subnet-id subnet-0be339d69f911c198 \
            --associate-public-ip-address \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Test-EC2}]' \
            --query 'Instances[0].InstanceId' --output text)
          
          echo "EC2_INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for EC2 to be Ready
        run: |
          sleep 60 # Give time for EC2 to initialize

      - name: Fetch Public IP
        id: fetch_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "EC2 Public IP: $PUBLIC_IP"

      - name: Allow SSH Access for GitHub Actions
        run: |
          RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
          aws ec2 authorize-security-group-ingress \
            --group-id $(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' --output text) \
            --protocol tcp \
            --port 22 \
            --cidr $RUNNER_IP/32

      - name: SSH into EC2 & Run Tests
        id: smoke-test
        continue-on-error: true
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$PUBLIC_IP << 'EOF'
            sudo yum update -y
            
            # Install Git
            sudo yum install -y git

            # Install Docker
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo usermod -aG docker $USER
            newgrp docker
            
            # Clone the repository
            cd ~
            git clone https://github.com/nannanav/crud-react-node-mySQL-go.git
            cd crud-react-node-mySQL-go
            
            # Run smoke tests
            bash smoke_test.sh
            echo $? > smoke_test_result.txt
          EOF
          
          SMOKE_TEST_STATUS=$(ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$PUBLIC_IP "cat ~/crud-react-node-mySQL-go/smoke_test_result.txt")
          echo "SMOKE_TEST_STATUS=$SMOKE_TEST_STATUS" >> $GITHUB_ENV
          echo "smoke test result:$SMOKE_TEST_STATUS"
          echo "::set-output name=SMOKE_TEST_STATUS::$SMOKE_TEST_STATUS"

      - name: Terminate EC2 Instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids $EC2_INSTANCE_ID

  build-and-push:
    needs: infra-test
    if: needs.infra-test.outputs.smoke_test_status == '0'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Application Repository (crud-react-node-mySQL-go)
        uses: actions/checkout@v4
        with:
          repository: nannanav/crud-react-node-mySQL-go

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URI }}

      - name: Build & Push Docker Images
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.AWS_ECR_URI }}/backend:latest ./backend
          docker build --platform linux/amd64 -t ${{ secrets.AWS_ECR_URI }}/frontend:latest ./frontend
          
          docker push ${{ secrets.AWS_ECR_URI }}/backend:latest
          docker push ${{ secrets.AWS_ECR_URI }}/frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
          
      - name: Allow SSH Access for GitHub Actions
        env:
          QA_EC2_IP: ${{ secrets.QA_EC2_IP }}
        run: |
          RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=ip-address,Values=$QA_EC2_IP" --query 'Reservations[0].Instances[0].InstanceId' --output text)
          GROUP_ID=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' --output text)
          aws ec2 authorize-security-group-ingress \
            --group-id GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr $RUNNER_IP/32
      
      - name: SSH into QA EC2 & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          QA_EC2_IP: ${{ secrets.QA_EC2_IP }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$QA_EC2_IP << 'EOF'
            # Pull new images
            docker pull ${{ secrets.AWS_ECR_URI }}/backend:latest
            docker pull ${{ secrets.AWS_ECR_URI }}/frontend:latest

            DB_HOST=$(aws ssm get-parameter --name "/app/DB_HOST" --with-decryption --query "Parameter.Value" --output text)
            DB_USER=$(aws ssm get-parameter --name "/app/DB_USER" --with-decryption --query "Parameter.Value" --output text)
            DB_PASSWORD=$(aws ssm get-parameter --name "/app/DB_PASSWORD" --with-decryption --query "Parameter.Value" --output text)
            DB_NAME=$(aws ssm get-parameter --name "/app/DB_NAME" --with-decryption --query "Parameter.Value" --output text)

            # Restart services with SSM-fetched credentials
            DB_HOST=$DB_HOST DB_USER=$DB_USER DB_PASSWORD=$DB_PASSWORD DB_NAME=$DB_NAME docker-compose -f docker-compose.yml down -v
            DB_HOST=$DB_HOST DB_USER=$DB_USER DB_PASSWORD=$DB_PASSWORD DB_NAME=$DB_NAME docker-compose -f docker-compose.yml up --build -d
          EOF