name: Deploy on Tag Creation

on:
  workflow_dispatch:
  repository_dispatch:
    types: [new-tag]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.get-tag.outputs.latest_tag }}
    steps:
      - name: Checkout Application Repository (crud-react-node-mySQL-go)
        uses: actions/checkout@v4
        with:
          repository: nannanav/crud-react-node-mySQL-go
          fetch-depth: 0  # Ensure all tags are fetched

      - name: Get latest tag
        id: get-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Checkout latest tag
        run: |
          git checkout $LATEST_TAG

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URI }}

      - name: Build & Push Docker Images
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.AWS_ECR_URI }}/backend:$LATEST_TAG ./backend
          docker build --platform linux/amd64 -t ${{ secrets.AWS_ECR_URI }}/frontend:$LATEST_TAG ./frontend
          docker build --platform linux/amd64 -t ${{ secrets.AWS_ECR_URI }}/internal-reverse-proxy:$LATEST_TAG ./internal-reverse-proxy
          
          docker push ${{ secrets.AWS_ECR_URI }}/backend:$LATEST_TAG
          docker push ${{ secrets.AWS_ECR_URI }}/frontend:$LATEST_TAG
          docker push ${{ secrets.AWS_ECR_URI }}/internal-reverse-proxy:$LATEST_TAG


  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v4

      - name: Get the latest tag from Source Repo
        run: |
          LATEST_TAG=$(git ls-remote --tags https://github.com/nannanav/crud-react-node-mySQL-go.git | awk '{print $2}' | grep -o 'v[0-9.]*' | sort -V | tail -n1)
          echo "Deploying tag $LATEST_TAG"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Allow SSH Access for GitHub Actions
        env:
          RC_EC2_IP: ${{ secrets.RC_EC2_IP }}
        run: |
          RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=ip-address,Values=$RC_EC2_IP" --query 'Reservations[0].Instances[0].InstanceId' --output text)
          GROUP_ID=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' --output text)
          aws ec2 authorize-security-group-ingress \
              --group-id $GROUP_ID \
              --protocol tcp \
              --port 22 \
              --cidr $RUNNER_IP/32

      - name: SSH into RC EC2 & Deploy
        env:
          LATEST_TAG: ${{ needs.build-and-push.outputs.latest_tag }}
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          RC_EC2_IP: ${{ secrets.RC_EC2_IP }}
          AWS_ECR_URI: ${{ secrets.AWS_ECR_URI }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          echo ${#AWS_ECR_URI}
          export AWS_ECR_URI=$AWS_ECR_URI
          echo $LATEST_TAG
          
          ssh -o StrictHostKeyChecking=no \
              -o SendEnv=AWS_ECR_URI \
              -o SendEnv=AWS_ACCESS_KEY_ID \
              -o SendEnv=AWS_SECRET_ACCESS_KEY \
              -o SendEnv=AWS_SESSION_TOKEN \
              -o SendEnv=LATEST_TAG \
              -i private_key.pem \
              ubuntu@$RC_EC2_IP << 'EOF'

            if [ -n "$AWS_ACCESS_KEY_ID" ]; then
                echo "AWS_ACCESS_KEY_ID is set"
            else
                echo "AWS_ACCESS_KEY_ID is not set"
            fi

            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URI }}

            DB_HOST=$(aws ssm get-parameter --name "/app/DB_HOST" --with-decryption --query "Parameter.Value" --output text)
            if [ $? -ne 0 ] || [ -z "$DB_HOST" ]; then
                echo "Failed to retrieve a valid DB_HOST"
                exit 1
            else
                echo "Successfully retrieved DB_HOST"
            fi
            DB_USER=$(aws ssm get-parameter --name "/app/DB_USER" --with-decryption --query "Parameter.Value" --output text)
            DB_PASSWORD=$(aws ssm get-parameter --name "/app/DB_PASSWORD" --with-decryption --query "Parameter.Value" --output text)
            DB_NAME=$(aws ssm get-parameter --name "/app/DB_NAME" --with-decryption --query "Parameter.Value" --output text)

            export DB_HOST=$DB_HOST
            export DB_USER=$DB_USER
            export DB_PASSWORD=$DB_PASSWORD
            export DB_NAME=$DB_NAME
            export TAG=$LATEST_TAG

            echo $LATEST_TAG

            if [ $? -ne 0 ] || [ -z "$LATEST_TAG" ]; then
                echo "Failed to retrieve a valid TAG: $TAG LATEST_TAG: $LATEST_TAG"
                exit 1
            else
                echo "Successfully retrieved TAG: $TAG LATEST_TAG: $LATEST_TAG"
            fi

            curl -O https://raw.githubusercontent.com/nannanav/crud-react-node-mySQL-go/main/docker-compose.yml

            # Restart services with SSM-fetched credentials
            docker-compose -f docker-compose.yml down -v

            docker-compose -f docker-compose.yml config|grep DB_HOST

            echo "Pulling latest images..."
            docker-compose -f docker-compose.yml pull

            echo "Starting containers..."
            docker-compose -f docker-compose.yml up -d
          EOF

